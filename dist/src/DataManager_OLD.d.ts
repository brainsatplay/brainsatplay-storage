export function initFS(oninit?: () => void, onerror?: () => void): true | Promise<any>;
export function readFiles(path: any): Promise<any>;
export function readFile(path: any): Promise<any>;
export function saveFile(content: any, path: any): Promise<any>;
export function _checkDirectoryExistence(fs: any, directory: any): Promise<any>;
export class DataManager {
    constructor(session?: any, onload?: (loaded: any) => void);
    session: any;
    state: any;
    onload: (loaded: any) => void;
    fs: import("browserfs/dist/node/core/FS").FSModule;
    sub: any;
    infoSub: any;
    deviceSubs: any[];
    saveBCISession: HTMLElement | null;
    newBCISession: HTMLElement | null;
    deinit: () => void;
    readyFNIRSDataForWriting: (from?: number, to?: string) => any;
    readyEEGDataForWriting: (from?: number, to?: string, getFFTs?: boolean) => any;
    saveFNIRSData: (from?: number, to?: string) => void;
    saveEEGdata: (from?: number, to?: string, getFFTs?: boolean) => void;
    save: (from?: number, to?: string, getFFTs?: boolean) => void;
    mean(arr: any): number;
    parseFNIRSData: (data?: any[], header?: any[]) => void;
    getFNIRSDataFromCSV: () => void;
    parseEEGData: (data: any, header: any) => void;
    getEEGDataFromCSV: () => void;
    toISOLocal(d: any): string;
    initFS: (oninit?: () => void, onerror?: () => void) => true | Promise<any>;
    _checkDirectoryExistence: (fs: any, directory: any) => Promise<any>;
    setupAutosaving: () => void;
    newSession: (oncreated: ((onload?: (directory: any) => void, fs_html_id?: string) => void) | undefined, deviceStream: any, deviceIdx: any) => void;
    autoSaveEEGChunk: (startidx: number | undefined, to: string | undefined, deviceName: string | undefined, getFFTs: boolean | undefined, onsaved: ((onload?: (directory: any) => void, fs_html_id?: string) => void) | undefined, deviceAtlas: any) => void;
    autoSaveFNIRSChunk: (startidx: number | undefined, to: string | undefined, deviceName: string | undefined, onsaved: ((onload?: (directory: any) => void, fs_html_id?: string) => void) | undefined, deviceAtlas: any) => void;
    getFilenames: (onload?: (directory: any) => void, directory?: string) => void;
    getFileSize: (filename: any, onread?: (size: any) => void) => void;
    deleteFile: (path?: string, ondelete?: (onload?: (directory: any) => void, fs_html_id?: string) => void) => void;
    saveFile: (content: any, path: any) => Promise<any>;
    readFiles: (path: any) => Promise<any>;
    readFile: (path: any) => Promise<any>;
    readFileText(path: any, onread?: (data: any, filename: any) => void): void;
    readFromDB: (filename?: any, begin?: number, end?: number, onread?: (data: any) => void) => void;
    loadCSVintoDB: (onload?: (data: any) => void) => void;
    parseDBData: (data: any, head: any, filename: any, hasend?: boolean) => any;
    getCSVHeader: (filename?: string, onOpen?: (header: any, filename: any) => void) => void;
    listFiles: (onload?: (directory: any) => void, fs_html_id?: string) => void;
    writeToCSV: (filename?: any) => Promise<void>;
    checkFolder(onResponse?: (result: any) => void): void;
    createDriveFolder(name?: string): void;
    backupToDrive: (filename: any) => void;
    listDriveFiles(listDivId: any, onload?: (onload?: (directory: any) => void, fs_html_id?: string) => void, ondownload?: (csvdata: any) => void): void;
}
